""""" General functioning
set nocompatible  " don't try to be vi compatible
nnoremap <SPACE> <Nop>
let mapleader=" "  " pick a leader key

" fast saving: <leader>w
nmap <leader>w :w!<cr>
command W w !sudo tee % > /dev/null  " :W sudo saves the file

" remap 'fj' to Escape
inoremap fj <Esc>

set history=500  " how many lines of history Vim remembers
set modelines=0  " turn off modelines for security reasons
set encoding=utf-8  " set encoding
set autoread  " update when a file is changed from the outside
set hidden  " current buffer can be put into background
set ttyfast  " faster rendering
set clipboard=unnamedplus  " use system clipboard for yank commands

" no visual or audio error bells
set noerrorbells  " no audio bells
set visualbell  " blink cursor on error instead of beeping
set t_vb=  " set visual bell to nothing
set tm=500

if has('mouse')
    set mouse=a
endif

" cursor motion
set scrolloff=3  " minimum number of lines to keep above and below cursor
set backspace=indent,eol,start  " allow backspace over special characters
set matchpairs+=<:>  " use % to jump between pairs

" move up/down editor lines
nnoremap j gj
nnoremap k gk

" browsing files
nnoremap <leader>f :Explore<cr>
vnoremap <leader>f :Explore<cr>
let g:netrw_liststyle = 1

" searching
set ignorecase  " case insensitive searching
set smartcase  " case-sensitive if expression contains a capital letter
set hlsearch  " highlight search results
set incsearch  " incremental search as you type
set showmatch  " show matching braces/parentheses
set matchtime=3  " how long matching brackets are shown
set magic  " use regex in search
map <leader>n :let @/=''<cr>  " clear search


""""" Appearance
syntax on  " turn on syntax highlighting
set number relativenumber  " show line numbers
set ruler  " show file stats
set laststatus=2  " show status bar all the time
set showmode  " show which mode you are currently in
set showcmd  " show incomplete commands

" whitespace
set wrap  " turn on line wrapping
set wrapmargin=8  " wrap lines when coming within n characters from side
set textwidth=0  " disable adding line break when word wrapping
set wrapmargin=0
set linebreak  " set soft wrapping
set autoindent  " automatically set indent of new line
set formatoptions=tcqrn1  " set some formatting options (see documentation for details)
set smarttab  " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4  " the visible width of tabs
set softtabstop=4  " edit as if the tabs are 4 characters wide
set shiftwidth=4  " number of spaces to use for indent and unindent
set shiftround  " round indent to a multiple of shiftwidth
set expandtab  " convert tabs to spaces

" visualize tabs and newlines
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=…  " show ellipsis at wrapping line break
set breakindent  " indent a word-wrapped line to same indent as previous line

" code folding settings
set foldmethod=syntax  " fold based on indent
set foldlevelstart=99  " start with no code folded
set foldnestmax=10  " depest fold is 10 levels
set nofoldenable  " don't fold by default
set foldlevel=1


" colours, etc.
set t_Co=256  " explicitly tell Vim that the terminal supports 256 colors

if &term =~ '256color'
    " disable background color erase
    set t_ut=
endif

" enable 24 bit color support if supported
if (has("termguicolors"))
    if (!(has("nvim")))
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
    set termguicolors
endif

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'  " highlight conflicts

" other key mappings
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" add new cell in Python file
nnoremap <leader>t o<cr># %%<cr><Esc>xi


" vim-plug plugin management
call plug#begin('~/.vim/plugged')

" Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug '/usr/bin/fzf'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-vinegar'
"Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
"Plug 'ryanoasis/vim-devicons'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'

"Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'jpalardy/vim-slime'

Plug 'flrnprz/candid.vim'
Plug 'flrnprz/plastic.vim'

call plug#end()

"let g:coc_global_extensions = [
    "\ 'coc-snippets',
    "\ 'coc-rust-analyzer',
    "\ 'coc-python',
    "\ ]

" plugin settings
"nnoremap <leader>f :NERDTreeToggle<cr>
"vnoremap <leader>f :NERDTreeToggle<cr>
"let NERDTreeShowHidden=1

let g:fzf_action = {
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }
nnoremap <C-p> :FZF<cr>
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

nnoremap <C-_> :call nerdcommenter#Comment(0,"toggle")<cr>
vnoremap <C-_> :call nerdcommenter#Comment(0,"toggle")<cr>gv

" coc plugin settings

set updatetime=300  " faster diagnostic messages
" don't give |ins-completion-menu| messages
set shortmess+=c
set signcolumn=yes  " always show signcolumns

" use tab for trigger completion with characters ahead and navigate
" use command ':verbose imap <tab>' to make sure tab is not mapped by other
" plugin
"inoremap <silent><expr> <TAB>
    "\ pumvisible() ? "\<C-n>" :
    "\ <SID>check_back_space() ? "\<TAB>" :
    "\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
    "let col = col('.') - 1
    "return !col || getline('.')[col - 1] =~# '\s'
"endfunction

" Use <c-space> to trigger completion
"inoremap <silent><expr> <C-space> coc#refresh()


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
"nnoremap <silent> K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
  "if (index(['vim','help'], &filetype) >= 0)
    "execute 'h '.expand('<cword>')
  "else
    "call CocAction('doHover')
  "endif
"endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
"nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
"xmap <leader>ft  <Plug>(coc-format-selected)
"nmap <leader>ft  <Plug>(coc-format-selected)

"augroup mygroup
  "autocmd!
  "" Setup formatexpr specified filetype(s).
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
"nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
"nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
"xmap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap if <Plug>(coc-funcobj-i)
"omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <C-d> <Plug>(coc-range-select)
" xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
"command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{down-of}"}

colorscheme candid
